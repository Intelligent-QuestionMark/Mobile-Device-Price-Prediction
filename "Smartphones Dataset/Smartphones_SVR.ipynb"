{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Intelligent-QuestionMark/Mobile-Phone-Price-Prediction/blob/smartphones-dataset-svr/%22Smartphones%20Dataset/Smartphones_SVR.ipynb%22\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IGE48odHQ3_8"
      },
      "source": [
        "# Feature Selection"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "z9Z2l_uJbLXu"
      },
      "source": [
        "## Numerical Features only"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yjUY106Jxymy",
        "outputId": "01ff1b18-a6ff-44f4-981d-71d8ff14e805"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "price    687\n",
            "dtype: int64\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "c:\\Users\\andre\\Documents\\Github\\Mobile-Phone-Price-Prediction\\.venv\\lib\\site-packages\\sklearn\\utils\\validation.py:1408: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ]
        }
      ],
      "source": [
        "from sklearn.feature_selection import SelectKBest, f_regression\n",
        "import pandas as pd\n",
        "\n",
        "\n",
        "pd.set_option(\"display.max_columns\", None)\n",
        "pd.set_option(\"display.max_rows\", None)\n",
        "pd.set_option(\"display.max_colwidth\", None)\n",
        "pd.set_option(\"display.float_format\", lambda x: \"%.2f\" % x)\n",
        "\n",
        "data = pd.read_csv(\"smartphones.csv\")\n",
        "del data['model']\n",
        "del data['brand_name']\n",
        "del data['processor_brand']\n",
        "del data['os']\n",
        "\n",
        "data = data.dropna()\n",
        "\n",
        "y = pd.DataFrame(data['price'])\n",
        "X = data.drop('price', axis=1)\n",
        "print(y.count())\n",
        "\n",
        "\n",
        "f_scores, p_values = f_regression(X, y.to_numpy().ravel())\n",
        "\n",
        "X = SelectKBest(f_regression, k=15).fit_transform(X, y)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EUxOX7UBbUeJ"
      },
      "source": [
        "## Target Encoder"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lhoIvRv5QVGD",
        "outputId": "4c0d3333-50c4-40a3-cfd6-cd7c2024a48a"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "                      Feature  F-Score  P-Value\n",
            "8             internal_memory   227.94     0.00\n",
            "3             processor_speed   225.04     0.00\n",
            "0                  avg_rating   191.73     0.00\n",
            "7                ram_capacity   154.37     0.00\n",
            "14  extended_memory_available   130.98     0.00\n",
            "18    processor_brand_encoded    67.19     0.00\n",
            "15          resolution_height    67.07     0.00\n",
            "17         brand_name_encoded    65.42     0.00\n",
            "19                 os_encoded    57.18     0.00\n",
            "6               fast_charging    56.20     0.00\n",
            "10               refresh_rate    49.15     0.00\n",
            "1                   5G_or_not    33.58     0.00\n",
            "16           resolution_width    26.38     0.00\n",
            "13       primary_camera_front    18.94     0.00\n",
            "9                 screen_size    17.35     0.00\n",
            "4            battery_capacity     7.08     0.01\n",
            "11           num_rear_cameras     1.62     0.20\n",
            "12        primary_camera_rear     1.38     0.24\n",
            "2                   num_cores     0.96     0.33\n",
            "5     fast_charging_available     0.00     1.00\n"
          ]
        }
      ],
      "source": [
        "#Trying Target Encoder\n",
        "from sklearn.feature_selection import f_regression\n",
        "from sklearn.preprocessing import TargetEncoder\n",
        "import pandas as pd\n",
        "\n",
        "\n",
        "pd.set_option(\"display.max_columns\", None)\n",
        "pd.set_option(\"display.max_rows\", None)\n",
        "pd.set_option(\"display.max_colwidth\", None)\n",
        "pd.set_option(\"display.float_format\", lambda x: \"%.2f\" % x)\n",
        "\n",
        "data = pd.read_csv(\"smartphones.csv\")\n",
        "y = data['price']\n",
        "\n",
        "#encoder = TargetEncoder(smooth=\"auto\", target_type=\"continuous\")\n",
        "#print(data[['brand_name']])\n",
        "#print(y)\n",
        "#for col in ['brand_name', 'processor_brand', 'os']:\n",
        "    # Fit and transform, then flatten to 1D array\n",
        "   # encoded = encoder.fit_transform(data[[col]], y).ravel()\n",
        "    #data[f\"{col}_encoded\"] = encoded\n",
        "\n",
        "encoder = TargetEncoder(target_type=\"continuous\")\n",
        "data['brand_name_encoded'] = encoder.fit_transform(data[['brand_name']], y).ravel()\n",
        "data['processor_brand_encoded'] = encoder.fit_transform(data[['processor_brand']], data['price'])\n",
        "data['os_encoded'] = encoder.fit_transform(data[['os']], data['price'])\n",
        "\n",
        "del data['model']\n",
        "del data['brand_name']\n",
        "del data['processor_brand']\n",
        "del data['os']\n",
        "\n",
        "data = data.dropna()\n",
        "\n",
        "y = data['price']\n",
        "X = data.drop('price', axis=1)\n",
        "\n",
        "\n",
        "f_scores, p_values = f_regression(X, y)\n",
        "\n",
        "# Create a DataFrame for better visualization\n",
        "feature_scores = pd.DataFrame({\n",
        "    'Feature': X.columns,\n",
        "    'F-Score': f_scores,\n",
        "    'P-Value': p_values\n",
        "}).sort_values(by='F-Score', ascending=False)\n",
        "\n",
        "# Display the feature importance scores\n",
        "print(feature_scores)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lK16VvyNQ2TQ"
      },
      "source": [
        "# New Section"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "ng8JrCzlTC8o",
        "outputId": "14305754-a1f0-4cb4-f2f2-bd3262eb3226"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[33538.67786963] [49990.]\n",
            "[18048.01736428] [19999.]\n",
            "[24631.33765203] [20499.]\n",
            "[21550.92055669] [22700.]\n",
            "[27914.38468034] [32999.]\n",
            "[15598.38639057] [17990.]\n",
            "[12091.03247983] [13999.]\n",
            "[14662.85399997] [13999.]\n",
            "[16331.41512081] [15499.]\n",
            "[46200.67366839] [38999.]\n",
            "[27066.41094682] [24820.]\n",
            "[34635.05092714] [19499.]\n",
            "[12698.11820732] [15499.]\n",
            "[18306.5873631] [25895.]\n",
            "[49098.02770706] [59999.]\n",
            "[15608.56440357] [19999.]\n",
            "[12226.92578929] [11725.]\n",
            "[13791.51367503] [20000.]\n",
            "[35619.46147335] [44990.]\n",
            "[9453.72470571] [9999.]\n",
            "[25023.91350218] [27999.]\n",
            "[8807.32724777] [10499.]\n",
            "[16431.91061125] [21990.]\n",
            "[18853.43088333] [24999.]\n",
            "[20577.55144122] [10990.]\n",
            "[17036.55679111] [19990.]\n",
            "[50767.41611944] [50999.]\n",
            "[56060.8772241] [64999.]\n",
            "[28610.3640082] [31999.]\n",
            "[15376.03410384] [24990.]\n",
            "[31923.36537632] [28499.]\n",
            "[36483.9498924] [32990.]\n",
            "[18306.5873631] [25969.]\n",
            "[30584.924875] [27994.]\n",
            "[22853.9400107] [21999.]\n",
            "[55675.25140242] [57999.]\n",
            "[33302.03683107] [29999.]\n",
            "[25603.3634168] [17990.]\n",
            "[39286.7389714] [39999.]\n",
            "[19997.52231493] [21788.]\n",
            "[12717.48755052] [13499.]\n",
            "[26250.62198586] [26380.]\n",
            "[16834.85954958] [15999.]\n",
            "[29011.41957137] [19990.]\n",
            "[12921.91319837] [13774.]\n",
            "[24254.7490007] [29990.]\n",
            "[58224.48462376] [75990.]\n",
            "[19016.20654408] [15999.]\n",
            "[30302.47193904] [32990.]\n",
            "[15062.46505291] [16999.]\n",
            "[44581.24803476] [43999.]\n",
            "[12955.60800644] [10499.]\n",
            "[9456.31763359] [8990.]\n",
            "[32288.94988957] [31990.]\n",
            "[14626.13445573] [8990.]\n",
            "[25466.90130928] [25289.]\n",
            "[46450.15735247] [69990.]\n",
            "[49103.94900571] [69990.]\n",
            "[17478.58795766] [18999.]\n",
            "[19827.51960867] [17999.]\n",
            "[38076.27036293] [29990.]\n",
            "[38944.78752221] [39999.]\n",
            "[18633.82186681] [17999.]\n",
            "[12685.86634628] [9589.]\n",
            "[10289.0968549] [8999.]\n",
            "[14989.68608092] [17999.]\n",
            "[32003.26035082] [30990.]\n",
            "[38924.99418343] [25999.]\n",
            "[41556.23557092] [42990.]\n",
            "[20434.8730773] [23399.]\n",
            "[20627.52596464] [16999.]\n",
            "[8690.69756965] [10499.]\n",
            "[39127.45314881] [39900.]\n",
            "[15342.93764894] [13989.]\n",
            "[36797.45166037] [34999.]\n",
            "[16335.6459344] [17990.]\n",
            "[17470.84151994] [14999.]\n",
            "[16153.92178857] [16999.]\n",
            "[24332.75866094] [30990.]\n",
            "[16053.68685752] [14999.]\n",
            "[15382.58876469] [14999.]\n",
            "[15478.93350577] [14700.]\n",
            "[11673.75195487] [13969.]\n",
            "[41286.9569437] [35999.]\n",
            "[17741.25561394] [20990.]\n",
            "[14422.19424847] [14999.]\n",
            "[21571.77610776] [20999.]\n",
            "[55320.12800479] [50990.]\n",
            "[11704.45657861] [10999.]\n",
            "[28408.60636641] [29999.]\n",
            "[14646.3023211] [13499.]\n",
            "[14236.29294072] [15998.]\n",
            "[11193.71353226] [8968.]\n",
            "[27036.46699226] [32990.]\n",
            "[34882.94192476] [30994.]\n",
            "[25292.05539628] [25595.]\n",
            "[36683.05544773] [28999.]\n",
            "[23340.7632253] [41990.]\n",
            "[41742.86427741] [28249.]\n",
            "[53403.38111814] [55999.]\n",
            "[40498.79387704] [34949.]\n",
            "[11411.73016709] [14450.]\n",
            "[15249.24261365] [15999.]\n",
            "[18598.3743001] [21999.]\n",
            "[14950.28827012] [10890.]\n",
            "[21293.8423735] [22999.]\n",
            "[35461.97083123] [59990.]\n",
            "[52128.60145533] [48900.]\n",
            "[13448.00364124] [15499.]\n",
            "[29841.55205077] [34990.]\n",
            "[13701.89065209] [13999.]\n",
            "[11043.35667108] [13990.]\n",
            "[11347.07423773] [12799.]\n",
            "[16642.85292927] [17859.]\n",
            "[19645.69951421] [18699.]\n",
            "[43900.55762322] [40480.]\n",
            "[40016.61316885] [36994.]\n",
            "[15223.64149068] [15999.]\n",
            "[11274.4596337] [8910.]\n",
            "[35151.594303] [31994.]\n",
            "[33958.98702673] [24999.]\n",
            "[15246.84805459] [12999.]\n",
            "[10782.84302051] [11989.]\n",
            "[19573.05147552] [17990.]\n",
            "[14486.49577651] [12999.]\n",
            "[25204.46026536] [25999.]\n",
            "[34551.33793611] [30990.]\n",
            "[15003.96662438] [14490.]\n",
            "[12881.07122986] [12799.]\n",
            "[41410.26099183] [39999.]\n",
            "[40198.83587523] [29990.]\n",
            "[17380.51037992] [15824.]\n",
            "[36354.04113525] [39990.]\n",
            "[27586.83284044] [24994.]\n",
            "[20036.1913515] [21995.]\n",
            "[9994.83913076] [8859.]\n",
            "[14918.6409722] [16499.]\n",
            "[19030.9650647] [23999.]\n",
            "[41566.21804075] [39990.]\n",
            "[13661.40297956] [14999.]\n",
            "[10348.67984931] [11499.]\n",
            "[23429.15824699] [19499.]\n",
            "[28173.42617403] [18990.]\n",
            "[29408.68062307] [36999.]\n",
            "[15188.5808754] [17999.]\n",
            "[16107.20438226] [19999.]\n",
            "[16786.04231882] [14999.]\n",
            "[16147.35306798] [15499.]\n",
            "[37045.49383306] [34999.]\n",
            "[11528.27505867] [10499.]\n",
            "[18959.93696311] [18499.]\n",
            "[16152.07074414] [17999.]\n",
            "[45925.93840659] [45999.]\n",
            "[34663.89322938] [26999.]\n",
            "[33557.97314434] [27999.]\n",
            "[47916.01047346] [42999.]\n",
            "[14237.15435345] [11999.]\n",
            "[13864.82652463] [14499.]\n",
            "[19677.84920363] [18999.]\n",
            "[17039.42004222] [16999.]\n",
            "[53135.23683764] [39990.]\n",
            "[22054.07332278] [23790.]\n",
            "[42035.96770437] [40990.]\n",
            "[18510.29432492] [12999.]\n",
            "[54944.87241538] [59999.]\n",
            "[15023.00791776] [12340.]\n",
            "[45151.87187658] [74999.]\n",
            "[12651.2259368] [13999.]\n",
            "[20659.33495709] [20990.]\n",
            "[16260.99644094] [18499.]\n",
            "[49705.10465288] [54990.]\n",
            "[29645.40761293] [23990.]\n",
            "Train accuracy: 0.4456459110620574\n",
            "Test accuracy: 0.8139320733584305\n",
            "6183.962184963903\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "c:\\Users\\andre\\Documents\\Github\\Mobile-Phone-Price-Prediction\\.venv\\lib\\site-packages\\sklearn\\utils\\validation.py:1408: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ]
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "sc_X = StandardScaler()\n",
        "sc_y = StandardScaler()\n",
        "scaled_X = sc_X.fit_transform(X)\n",
        "scaled_y = sc_y.fit_transform(y.to_numpy().reshape(-1, 1))\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(scaled_X, scaled_y)\n",
        "\n",
        "\n",
        "from sklearn.svm import SVR\n",
        "regressor = SVR(kernel = 'rbf', epsilon=0.05)\n",
        "regressor.fit(X_train, y_train)\n",
        "\n",
        "pred = regressor.predict(X_test)\n",
        "pred = pd.DataFrame(pred)\n",
        "\n",
        "predicted_price = sc_y.inverse_transform(pred)\n",
        "real_price = sc_y.inverse_transform(y_test)\n",
        "from sklearn.metrics import root_mean_squared_error\n",
        "\n",
        "for est, real in zip(predicted_price, real_price):\n",
        "  print(est, real)\n",
        "\n",
        "print(f\"Train accuracy: {regressor.score(X_train, y_train)}\")\n",
        "print(f\"Test accuracy: {regressor.score(X_test, y_test)}\")\n",
        "print(root_mean_squared_error(real_price, predicted_price))\n",
        "\n",
        "graph_points = 50\n",
        "plt.scatter(range(graph_points), real_price[:graph_points], color = 'magenta')\n",
        "plt.plot(range(graph_points), predicted_price[:graph_points], color = 'green')\n",
        "plt.xlabel('Data')\n",
        "plt.ylabel('Price')\n",
        "plt.show()"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [
        "z9Z2l_uJbLXu",
        "jmlYcrCFAUyq",
        "EUxOX7UBbUeJ"
      ],
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": ".venv",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.10.1"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}